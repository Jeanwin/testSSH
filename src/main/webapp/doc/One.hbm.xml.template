<?xml version="1.0" encoding='UTF-8'?> 

<!DOCTYPE hibernate-mapping PUBLIC 
                            "-//Hibernate/Hibernate Mapping DTD 5.0//EN" 
                            "http://hibernate.sourceforge.net/hibernate-mapping-5.0.dtd" >
<hibernate-mapping package="包名">
	<class name="类名" table="表名">
		<id name="主键在java类中的字段名" column="对应表中字段" type="类型 ">
			<generator class="主键生成策略" />
		</id>
		……
	</class>
</hibernate-mapping>

1. 主键（id）
Hibernate的主键生成策略有如下几种：

1) assigned
主键由外部程序负责生成，在 save() 之前指定。

2) hilo
通过hi/lo 算法实现的主键生成机制，需要额外的数据库表或字段提供高位值来源。

3) seqhilo
与hilo 类似，通过hi/lo 算法实现的主键生成机制，需要数据库中的 Sequence，适用于支持 Sequence 的数据库，如Oracle。

4) increment
主键按数值顺序递增。此方式的实现机制为在当前应用实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的时候将此值加1作为主键。这种方式可能产生的问题是：不能在集群下使用。

5) identity
采用数据库提供的主键生成机制。如DB2、SQL Server、MySQL 中的主键生成机制。

6) sequence
采用数据库提供的 sequence 机制生成主键。如
Oralce 中的Sequence。

7) native
由 Hibernate 根据使用的数据库自行判断采用 identity、hilo、sequence 其中一种作为主键生成方式。

8) uuid.hex
由 Hibernate 基于128 位 UUID 算法 生成16 进制数值（编码后以长度32 的字符串表示）作为主键。

9) uuid.string
与uuid.hex
类似，只是生成的主键未进行编码（长度16），不能应用在 PostgreSQL 数据库中。

10) foreign
使用另外一个相关联的对象的标识符作为主键。

主键配置举例如下：
<id name="id" column="id" type="java.lang.Integer">
	<generator class="native" />
</id>

另外还可以扩展Hibernate的类来做自己的主键生成策略，具体例子见：http://www.javaeye.com/topic/93391。

2. 普通属性（property）
开发人员可以打开网址：http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd

来查看hibernate3.0的dtd信息，可看到property的定义如下： 

<!ELEMENT property (meta*,(column|formula)*,type?)> 
                    <!ATTLIST property name CDATA #REQUIRED> 
                    <!ATTLIST property node CDATA #IMPLIED> 
                    <!ATTLIST property access CDATA #IMPLIED> 
                    <!ATTLIST property type CDATA #IMPLIED> 
                    <!ATTLIST property column CDATA #IMPLIED> 
                    <!ATTLIST property length CDATA #IMPLIED> 
                    <!ATTLIST property precision CDATA #IMPLIED> 
                    <!ATTLIST property scale CDATA #IMPLIED> 
                    <!ATTLIST property not-null (true|false) #IMPLIED> 
                    <!ATTLIST property unique (true|false) "false"> 
                    <!ATTLIST property unique-key CDATA #IMPLIED> 
                    <!ATTLIST property index CDATA #IMPLIED>                                                                                  <!-- include the columns spanned by this property in an index --> 
                    <!ATTLIST property update (true|false) #IMPLIED> 
                    <!ATTLIST property insert (true|false) #IMPLIED> 
                    <!ATTLIST property optimistic-lock (true|false) "true">          <!-- only supported for properties of a class (not component) --> 
                    <!ATTLIST property formula CDATA #IMPLIED> 
                    <!ATTLIST property lazy (true|false) "false"> 
    <!ATTLIST property generated (never|insert|always) "never">
它的各属性中比较常用的有：name（对应的java类的属性名称）、column（对应的表中的字段）、tyope（属性的类型，eg.java.lang.String）、not-null（设置该属性是否为空，为true时表示非空，默认为false）和length(字段的长度限制)。

Eg1.
<property name="accessname" column="accessName" type="java.lang.String" not-null="true" />

Eg2.
<property name="state" column="state" type="java.lang.Byte" not-null="true" />

Eg3.
<property name="description" column="description" type="java.lang.String" />

3. 一对多关系（
<many-to-one … />
和
<set …></set>
）
一对多关系一般是用在一个表与另一个表存在外键关联的时候，例如用户表的组织id与组织表存在外键关联，则“一”方为组织表，“多”方为用户表，因为一个组织可以包含多个用户，而一个用户只能隶属于一个组织。

对于存在一对多关系和多对一关系的双方，需要在…hbm.xml中进行相应配置，这时在“一”方（例如：组织）需要在映射文件中添加
<set …></set>
元素，因为它包含多个“多”方的对象，一般的格式如下：

<set name="java映射类中对应的属性" inverse="true" lazy="true">
	<key column="表中对应字段" />
	<one-to-many class="多方的类" />
</set>

Eg.

<set name="userSet" inverse="true" lazy="true">
	<key column="orgId" />
	<one-to-many class="User" />
</set>

“多”方（例如：用户）隶属于一个“一”方对象，一般的格式如下：

<many-to-one name="java映射类中对应的属性" column="表中对应字段" class="类名" not-null="true" />

Eg.

<many-to-one name="org" column="orgId" class="Organization" not-null="true" />

4. 一对一关系（
<one-to-one … />
）
一对一关系相对一对多关系来说比较少见，但也在某些情况下要用到，例如有一个用户的基本信息表（USER）和一个用户的密码表（PASSWD）就存在一对一的关系。下面来看一下一对一关系在Hibernate的配置。

其中主表（eg. 用户的基本信息表）的配置如下：

<one-to-one name="主表对象中子表对象的属性名" class="子表对象的类名" cascade="save-update" />

Eg.
<one-to-one name="password" class="com.amigo.dao.pojo.Passwd" cascade="save-update" />

子表（eg. 用户的密码表）的配置如下：

<one-to-one name="子表对象中主表对象的属性名" class="主表对象的类名" constrained="true" />

Eg.
<one-to-one name="user" class="com.amigo.dao.pojo.User " constrained="true" />

5. 多对多关系（
<many-to-many … />
）
在数据库设计时，一般将多对多关系转换为两个一对多（或多对一）关系，例如在基于角色的权限系统中，用户和角色存在的关系就是典型的多对多关系，即一个用户可以具有多个角色，而一个角色又可以为多个用户所有，一般在设计时，都会加一个用户与角色的关联表，该表与用户表以及角色表都存在外键关联。

在本小节中讲述的是没有分解的多对多关系在Hibernate中如何配置。设置格式如下：

<set name="java对象的属性名" table="表名" cascade="all" outer-join="false">

	<key column="表的对应字段" />

	<many-to-many class="另一个表的对象类" column="另一个表的字段" />

</set>

Eg. 上述的多对多关系可以表示为：

t_user方：

<set name="roleSet" table="t_user" cascade="all" outer-join="false">

	<key column="roleId" />

	<many-to-many class="com.amigo.dao.pojo.Role" column="roleId" />

</set>

t_role方：

<set name="userSet" table="t_role" cascade="all" outer-join="false">

	<key column="roleId" />

	<many-to-many class="com.amigo.dao.pojo.User" column="roleId" />

</set>

6.多对一关联
<class name="com.lavasoft.dx._1_1_fk.Person11fk" table="PERSON_11fk"> 
    <id name="personid"> 
         <generator class="identity"/> 
    </id> 
    <property name="name"/> 
    <property name="age"/> 
    <!--用来映射关联PO column是Address在该表中的外键列名,增加unique变成“1-1”--> 
    <many-to-one name="address11fk" column="addressId" unique="true"/> 
</class> 

7. 完整实例
在本小节中举一些.hbm.xml映射文件的例子，让开发人员对其有一个感性的认识。接下来讲述一个用户表（tbl_user）、用户与角色关联表（tbl_user_role）、角色表（tbl_role）以及组织表（tbl_organization）的例子。

（1）tbl_user 

<?xml version="1.0" encoding='UTF-8'?> 

<!DOCTYPE hibernate-mapping PUBLIC 

                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 

                            "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<hibernate-mapping package="com.amigo.dao.pojo">

	<class name="User" table="tbl_user">

		<id name="loginname" column="loginName" type="java.lang.String">

			<generator class="assigned" />

		</id>



		<property name="name" column="name" type="java.lang.String" not-null="true" />

		<property name="password" column="password" type="java.lang.String" not-null="true" />

		<property name="mobile" column="mobile" type="java.lang.String" />

		<property name="telephone" column="telephone" type="java.lang.String" />

		<property name="email" column="email" type="java.lang.String" />

		<property name="createtime" column="createTime" type="java.util.Date" not-null="true" />

		<property name="lastlogintime" column="lastLoginTime" type="java.util.Date" />

		<property name="logintimes" column="loginTimes" type="java.lang.Long" not-null="true" />

		<property name="state" column="state" type="java.lang.Byte" not-null="true" />

		<property name="description" column="description" type="java.lang.String" />



		<many-to-one name="organization" column="orgId" class="Organization" not-null="true" />

		<set name="userRoleSet" inverse="true" cascade="all-delete-orphan" lazy="true">

			<key column="loginName" />

			<one-to-many class="UserRole" />

		</set>

</hibernate-mapping> 